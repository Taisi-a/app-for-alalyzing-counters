import tkinter as tk
from tkinter import ttk, scrolledtext
import pandas as pd

import visualization.pdf_report

from core.analysis import perform_analysis

from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt
from visualization import plots
import core.technical_analysis
import gui
import gui.utils
import gui.run_button
import gui.filters


def update_graphs(filtered_data, selected_graphs, tab_name, save_format="PNG"):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ—à–∏–±–æ–∫"""

    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
    for widget in gui.graph_container.winfo_children():
        widget.destroy()

    if not selected_graphs:
        return

    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –¥–≤–æ–π–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
    container = ttk.Frame(gui.graph_container)
    container.pack(fill="both", expand=True)

    # –°–æ–∑–¥–∞–µ–º —Ö–æ–ª—Å—Ç —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –ø–æ –æ–±–µ–∏–º –æ—Å—è–º
    tk_canvas = tk.Canvas(container)
    h_scrollbar = ttk.Scrollbar(container, orient="horizontal", command=tk_canvas.xview)
    v_scrollbar = ttk.Scrollbar(container, orient="vertical", command=tk_canvas.yview)

    scroll_frame = ttk.Frame(tk_canvas)

    scroll_frame.bind(
        "<Configure>",
        lambda e: tk_canvas.configure(scrollregion=tk_canvas.bbox("all"))
    )

    tk_canvas.create_window((0, 0), window=scroll_frame, anchor="nw")
    tk_canvas.configure(xscrollcommand=h_scrollbar.set, yscrollcommand=v_scrollbar.set)

    # –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    tk_canvas.grid(row=0, column=0, sticky="nsew")
    v_scrollbar.grid(row=0, column=1, sticky="ns")
    h_scrollbar.grid(row=1, column=0, sticky="ew")

    container.grid_rowconfigure(0, weight=1)
    container.grid_columnconfigure(0, weight=1)

    # –†–∞–∑–º–µ—Ä—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
    GRAPH_WIDTH = 800
    GRAPH_HEIGHT = 400

    # –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—Ä–∞–Ω–µ–µ
    health_stats = {}
    leaks = pd.DataFrame()
    if tab_name == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑":
        health_stats = core.technical_analysis.analyze_meter_health(filtered_data)
        leaks = core.technical_analysis.detect_leaks(filtered_data)

    for graph_id in selected_graphs:
        frame = ttk.Frame(scroll_frame,
                          width=GRAPH_WIDTH,
                          height=GRAPH_HEIGHT,
                          borderwidth=1,
                          relief="solid")
        frame.pack_propagate(False)
        frame.pack(fill="both", padx=5, pady=5)

        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã matplotlib
            fig = plt.figure(figsize=(GRAPH_WIDTH / 100, GRAPH_HEIGHT / 100), dpi=100)

            # –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            if tab_name == "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö":
                if graph_id == 1:
                    fig = visualization.plots.plot_consumption_trend(filtered_data, save=False)
                elif graph_id == 2:
                    fig = visualization.plots.plot_hourly_pattern(filtered_data, save=False)
                elif graph_id == 3:
                    fig = visualization.plots.plot_–ù–ï—Ç_–ï–©–ï_–¢–ê–ö–û–ì–û(filtered_data, save=False)
                elif graph_id == 4:
                    fig = visualization.plots.plot_predictions(filtered_data, save=False)
                elif graph_id == 5:
                    fig = visualization.plots.plot_anomalies(filtered_data, save=False)

            elif tab_name == "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ":
                if graph_id == 1:
                    fig = visualization.plots.plot_meter_comparison(filtered_data, save=False)
                elif graph_id == 2:
                    fig = visualization.plots.plot_meter_type_comparison(filtered_data, save=False)
                elif graph_id == 3:
                    fig = visualization.plots.plot_city_comparison(filtered_data, save=False)
                elif graph_id == 4:
                    fig = visualization.plots.plot_date_comparison(filtered_data, save=False)

            elif tab_name == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑":
                if graph_id == 1:
                    fig = visualization.plots.plot_leaks(filtered_data, leaks, save=False)
                elif graph_id == 2:
                    fig = visualization.plots.plot_meter_health_temp(filtered_data, health_stats, save=False)
                elif graph_id == 3:
                    fig = visualization.plots.plot_meter_health_sw(filtered_data, health_stats, save=False)

            if fig:
                fig.tight_layout()

                # –°–æ–∑–¥–∞–Ω–∏–µ canvas –¥–ª—è matplotlib
                mpl_canvas = FigureCanvasTkAgg(fig, master=frame)
                mpl_canvas.draw()

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤–∏–¥–∂–µ—Ç–∞
                mpl_widget = mpl_canvas.get_tk_widget()
                mpl_widget.config(width=GRAPH_WIDTH - 10, height=GRAPH_HEIGHT - 50)
                mpl_widget.pack(fill="none", expand=False)

                # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–∞—è)
                btn_frame = ttk.Frame(frame)
                btn_frame.pack(side="bottom", fill="x", pady=(0, 5))

                save_btn = ttk.Button(
                    btn_frame,
                    text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫",
                    style="Accent.TButton",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
                    command=lambda f=fig, fmt=save_format: visualization.plots.save_plot(f, format=fmt)
                )
                save_btn.pack(side="right", padx=5, ipadx=10, ipady=3)

        except Exception as e:
            error_label = ttk.Label(frame, text=f"–û—à–∏–±–∫–∞: {str(e)}", foreground="red")
            error_label.pack()
            continue

